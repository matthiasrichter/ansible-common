---
- name: Setup local groups
  ansible.builtin.group:
    name: "{{ item.key }}"
    state: "{{ item.value.state | default('present') }}"
    gid: "{{ item.value.gid | default(omit) }}"
    local: "{{ item.value.local | default(false) }}"
  with_dict: "{{ custom_groups | default({}) }}"

- name: Setup local users
  ansible.builtin.user:
    name: "{{ item.key }}"
    state: "{{ item.value.state | default('present') }}"
    uid: "{{ item.value.uid | default(omit) }}"
    group: "{{ item.value.group | default(omit) }}"
    groups: "{{ item.value.groups | default(omit) }}"
    shell: "{{ item.value.shell | default(omit) }}"
    createhome: "{{ item.value.createhome | default('yes') }}"
    system: "{{ item.value.system | default(omit) }}"
  with_dict: "{{ custom_users | default({}) }}"

- name: Setup authorized keys
  ansible.posix.authorized_key:
    user: "{{ item.value.user | default(item.key) }}"
    state: "{{ item.value.state | default('present') }}"
    key_options: "{{ item.value.key_options | default(omit) }}"
    key: "{{ item.value.key }}"
  with_dict: "{{ custom_authorized_keys | default({}) }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: Setup sudo
  ansible.builtin.lineinfile:
    dest: "{{ item.value.file | default('/etc/sudoers.d/20-' + item.key) }}"
    state: "{{ item.value.state | default('present') }}"
    create: true
    mode: '0400'
    regexp: "{{ item.key + '.*' }}"
    line: "{{ item.key }} {{ item.value.host | default('ALL') }}={{ item.value.operator | \
           default('(ALL)') }} {{ item.value.tag | default('NOPASSWD') }}:{{ item.value.command | \
           default('ALL') }}"
  with_dict: "{{ custom_sudoers | default({}) }}"
  # ignore_errors: true

- name: Clean up cloud user
  ansible.builtin.user:
    name: "{{ cloud_user }}"
    state: absent
  when:
    - cloud_user is defined
    - cloud_user != lookup('env', 'USER')
    - remove_cloud_user | default(false)
